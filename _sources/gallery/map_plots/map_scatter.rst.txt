
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/map_plots/map_scatter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_map_plots_map_scatter.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_map_plots_map_scatter.py:


Creating a map plot with scatter data
-------------------------------------

The following example plots scatter data
on a map plot over a CONUS domain. This
example also shows how to annotate stats
on the plot.

.. GENERATED FROM PYTHON SOURCE LINES 10-61



.. image-sg:: /gallery/map_plots/images/sphx_glr_map_scatter_001.png
   :alt: EMCPy Map
   :srcset: /gallery/map_plots/images/sphx_glr_map_scatter_001.png
   :class: sphx-glr-single-img





.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from emcpy.plots import CreatePlot, CreateFigure
    from emcpy.plots.map_tools import Domain, MapProjection
    from emcpy.plots.map_plots import MapScatter


    def main():
        # Create test data
        lats = np.linspace(35, 50, 30)
        lons = np.linspace(-70, -120, 30)
        data = np.linspace(200, 300, 30)

        # Create scatter plot on CONUS domian
        scatter = MapScatter(lats, lons, data)
        # change colormap and markersize
        scatter.cmap = 'Blues'
        scatter.markersize = 25

        # Create plot object and add features
        plot1 = CreatePlot()
        plot1.plot_layers = [scatter]
        plot1.projection = 'plcarr'
        plot1.domain = 'conus'
        plot1.add_map_features(['coastline', 'states'])
        plot1.add_xlabel(xlabel='longitude')
        plot1.add_ylabel(ylabel='latitude')
        plot1.add_title(label='EMCPy Map', loc='center',
                        fontsize=20)
        plot1.add_colorbar(label='colorbar label',
                           fontsize=12, extend='neither')

        # annotate some stats
        stats_dict = {
            'nobs': len(np.linspace(200, 300, 30)),
            'vmin': 200,
            'vmax': 300,
        }
        plot1.add_stats_dict(stats_dict=stats_dict, yloc=-0.175)

        fig = CreateFigure()
        fig.plot_list = [plot1]
        fig.create_figure()

        plt.show()


    if __name__ == '__main__':
        main()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.953 seconds)


.. _sphx_glr_download_gallery_map_plots_map_scatter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: map_scatter.py <map_scatter.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: map_scatter.ipynb <map_scatter.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
